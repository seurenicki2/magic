#include "StdAfx.h"
#include "CDB\DumpDetector.h"
#include "CDB\CheatDB.h"
#include <tlhelp32.h>
#include <windows.h>
#include <stdlib.h>
#include <shellapi.h>
#include <stdio.h>
#include <time.h>
#include "accctrl.h"
#include "aclapi.h"

HANDLE hEvent;
int nDetected = 0;


CGameClientAntiCheat::ANTIHACK_DBDUMP g_ProcessesDumps[MAX_PROCESS_DATABASE] =
{
	{ 0x4C8259, { 0xA1, 0x38, 0xBD, 0x4C, 0x00, 0x8B, 0x00, 0x8B, 0x4D, 0xFC, 0xBA, 0xC0, 0x82, 0x4C, 0x00, 0xE8, 0x1F, 0xF1, 0xFF, 0xFF, 0x33, 0xDB, 0xE8, 0xF8, 0xBE, 0xF3, 0xFF, 0x33, 0xC0, 0x5A, 0x59, 0x59}},   // Catastrophe v0.1
	{ 0x5AA16C, { 0xE8, 0x13, 0x40, 0xFF, 0xFF, 0xE8, 0x86, 0x2C, 0xFC, 0xFF, 0x8B, 0x03, 0xBA, 0xD4, 0xA2, 0x5A, 0x00, 0xE8, 0xC2, 0x98, 0xEE, 0xFF, 0x8B, 0x03, 0x83, 0xC0, 0x50, 0xBA, 0xF0, 0xA2, 0x5A, 0x00}},   // Cheat Engine 5.3
	{0x5674D4, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x2C, 0x70, 0x56, 0x00, 0xE8, 0xC6, 0xFA, 0xE9, 0xFF, 0x8B, 0x1D, 0x98, 0xD8, 0x56, 0x00, 0x33, 0xC0, 0x55, 0x68}},   //Cheat Engine 5.0
	{0x574EC0, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0xE0, 0x49, 0x57, 0x00, 0xE8, 0xCE, 0x20, 0xE9, 0xFF, 0x8B, 0x1D, 0xF8, 0xB8, 0x57, 0x00, 0x33, 0xC0, 0x55, 0x68}},   //Cheat Engine 5.1.1
	{0x591F94, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x5C, 0x1A, 0x59, 0x00, 0xE8, 0x26, 0x50, 0xE7, 0xFF, 0x8B, 0x1D, 0x20, 0x89, 0x59, 0x00, 0x33, 0xC0, 0x55, 0x68}},   //Cheat Engine 5.2   
	{0x5CF354, {0x78, 0xAA, 0x4A, 0x00, 0x48, 0xAA, 0x4A, 0x00, 0xFC, 0x17, 0x4A, 0x00, 0xCC, 0x17, 0x4A, 0x00, 0xB0, 0x22, 0x52, 0x00, 0x80, 0x22, 0x52, 0x00, 0x10, 0x12, 0x4A, 0x00, 0xE0, 0x11, 0x4A, 0x00}},   //Cheat Engine 5.4
	{0x606140, {0x8C, 0x79, 0x60, 0x00, 0xE0, 0xA8, 0x60, 0x00, 0x18, 0x70, 0x4D, 0x00, 0xE8, 0x18, 0x60, 0x00, 0x8C, 0xA0, 0x60, 0x00, 0xDC, 0x9C, 0x60, 0x00, 0x3C, 0x86, 0x60, 0x00, 0xD0, 0x9D, 0x60, 0x00}},	// Cheat Engine 5.5
	{0x5674D4, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x2C, 0x70, 0x56, 0x00, 0xE8, 0xC6, 0xFA, 0xE9, 0xFF, 0x8B, 0x1D, 0x98, 0xD8, 0x56, 0x00, 0x33, 0xC0, 0x55, 0x68}},   // Cheat Engine 5.0
	{0x574EC0, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0xE0, 0x49, 0x57, 0x00, 0xE8, 0xCE, 0x20, 0xE9, 0xFF, 0x8B, 0x1D, 0xF8, 0xB8, 0x57, 0x00, 0x33, 0xC0, 0x55, 0x68}},   // Cheat Engine 5.1.1
	{0x574EEC, {0xE8, 0x8B, 0xEA, 0xF1, 0xFF, 0x8D, 0x45, 0xEC, 0xE8, 0x33, 0x56, 0xFF, 0xFF, 0xE8, 0x5A, 0x1F, 0xFD, 0xFF, 0x8B, 0x03, 0xBA, 0x68, 0x50, 0x57, 0x00, 0xE8, 0x6A, 0xE6, 0xF1, 0xFF, 0x8B, 0x03}},   // Cheat Engine 5.1
	{0x4CBD70, {0x8D, 0x85, 0x7C, 0xFE, 0xFF, 0xFF, 0xBA, 0x03, 0x00, 0x00, 0x00, 0xE8, 0xB0, 0x8F, 0xF3, 0xFF, 0x8D, 0x85, 0x88, 0xFE, 0xFF, 0xFF, 0xBA, 0x04, 0x00, 0x00, 0x00, 0xE8, 0xA0, 0x8F, 0xF3, 0xFF}},   // Cheat Engine 5.1
	{0x591F94, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x5C, 0x1A, 0x59, 0x00, 0xE8, 0x26, 0x50, 0xE7, 0xFF, 0x8B, 0x1D, 0x20, 0x89, 0x59, 0x00, 0x33, 0xC0, 0x55, 0x68}},   // Cheat Engine 5.2
	{0x591FC0, {0xE8, 0x07, 0x23, 0xF0, 0xFF, 0x8D, 0x45, 0xEC, 0xE8, 0x1F, 0x4B, 0xFF, 0xFF, 0xE8, 0x76, 0x99, 0xFC, 0xFF, 0x8B, 0x03, 0xBA, 0x18, 0x21, 0x59, 0x00, 0xE8, 0xE6, 0x1E, 0xF0, 0xFF, 0x8B, 0x03}},   // Cheat Engine 5.2
	{0x5839E7, {0x8D, 0x45, 0xB0, 0x50, 0x6A, 0x08, 0x8D, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x50, 0xA1, 0xB0, 0xA1, 0x59, 0x00, 0x8B, 0x55, 0xA4, 0x8B, 0x04, 0x90, 0x50, 0xA1, 0x28, 0xA1, 0x59, 0x00, 0x50, 0xA1}},   // Cheat Engine 5.2
	{0x5AA16C, {0xE8, 0x13, 0x40, 0xFF, 0xFF, 0xE8, 0x86, 0x2C, 0xFC, 0xFF, 0x8B, 0x03, 0xBA, 0xD4, 0xA2, 0x5A, 0x00, 0xE8, 0xC2, 0x98, 0xEE, 0xFF, 0x8B, 0x03, 0x83, 0xC0, 0x50, 0xBA, 0xF0, 0xA2, 0x5A, 0x00}},   // Cheat Engine 5.3
	{0x4CBE2B, {0x8D, 0x55, 0xF0, 0xB9, 0x04, 0x00, 0x00, 0x00, 0x8B, 0xC7, 0xE8, 0x02, 0x15, 0xF5, 0xFF, 0x8B, 0x55, 0xF0, 0x8B, 0xC3, 0xE8, 0x8C, 0xF7, 0xFD, 0xFF, 0x8D, 0x55, 0xF0, 0xB9, 0x04, 0x00, 0x00}},   // Cheat Engine 5.3
	{0x5CF354, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x44, 0xED, 0x5C, 0x00, 0xE8, 0x62, 0x7E, 0xE3, 0xFF, 0x8B, 0x1D, 0xD4, 0x5A, 0x5D, 0x00, 0x33, 0xC0, 0x55, 0x68}},   // Cheat Engine 5.4
	{0x5CF440, {0xE8, 0x37, 0xA3, 0xFC, 0xFF, 0xE8, 0x8E, 0x96, 0xF9, 0xFF, 0x8B, 0x03, 0xBA, 0xA8, 0xF5, 0x5C, 0x00, 0xE8, 0x2A, 0xBD, 0xEC, 0xFF, 0x8B, 0x03, 0x83, 0xC0, 0x50, 0xBA, 0xC4, 0xF5, 0x5C, 0x00}},   // Chear Engine 5.4
	{0x5CF43D, {0x8D, 0x45, 0xEC, 0xE8, 0x37, 0xA3, 0xFC, 0xFF, 0xE8, 0x8E, 0x96, 0xF9, 0xFF, 0x8B, 0x03, 0xBA, 0xA8, 0xF5, 0x5C, 0x00, 0xE8, 0x2A, 0xBD, 0xEC, 0xFF, 0x8B, 0x03, 0x83, 0xC0, 0x50, 0xBA, 0xC4}},   // Cheat Engine 5.4 
	{0x5FECF4, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0xE4, 0xE4, 0x5F, 0x00, 0xE8, 0x9E, 0x89, 0xE0, 0xFF, 0x8B, 0x1D, 0xEC, 0x62, 0x60, 0x00, 0x33, 0xC0, 0x55, 0x68}},   // Cheat Engine 5.5
	{0x5FECF4, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0xE4, 0xE4, 0x5F, 0x00, 0xE8, 0x9E, 0x89, 0xE0, 0xFF, 0x8B, 0x1D, 0xEC, 0x62, 0x60, 0x00, 0x33, 0xC0, 0x55, 0x68}},   // Cheat Engine 5.5
	{0x5FED5B, {0xE8, 0x10, 0xC3, 0xE9, 0xFF, 0x8B, 0x0D, 0x64, 0x5D, 0x60, 0x00, 0x8B, 0x03, 0x8B, 0x15, 0x00, 0x1D, 0x55, 0x00, 0xE8, 0xFD, 0xC2, 0xE9, 0xFF, 0x8B, 0x0D, 0xC8, 0x5E, 0x60, 0x00, 0x8B, 0x03}},   // Cheat Engine 5.5
	{0x5674D4, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x2C, 0x70, 0x56, 0x00, 0xE8, 0xC6, 0xFA, 0xE9, 0xFF, 0x8B, 0x1D, 0x98, 0xD8, 0x56, 0x00, 0x33, 0xC0, 0x55, 0x68}}, // Cheat Engine 5.0{
	{0x574EC0, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0xE0, 0x49, 0x57, 0x00, 0xE8, 0xCE, 0x20, 0xE9, 0xFF, 0x8B, 0x1D, 0xF8, 0xB8, 0x57, 0x00, 0x33, 0xC0, 0x55, 0x68}}, // Cheat Egine 5.1.1{
	{0x591F94, {0x55, 0x8B, 0xEC, 0x83, 0xC4, 0xEC, 0x53, 0x33, 0xC0, 0x89, 0x45, 0xEC, 0xB8, 0x5C, 0x1A, 0x59, 0x00, 0xE8, 0x26, 0x50, 0xE7, 0xFF, 0x8B, 0x1D, 0x20, 0x89, 0x59, 0x00, 0x33, 0xC0, 0x55, 0x68}}, // Cheat Engine 5.2{
	{0x5CF354, {0x78, 0xAA, 0x4A, 0x00, 0x48, 0xAA, 0x4A, 0x00, 0xFC, 0x17, 0x4A, 0x00, 0xCC, 0x17, 0x4A, 0x00, 0xB0, 0x22, 0x52, 0x00, 0x80, 0x22, 0x52, 0x00, 0x10, 0x12, 0x4A, 0x00, 0xE0, 0x11, 0x4A, 0x00}}, // Cheat Engine 5.4{
	{0x40C484, {0x8B, 0x45, 0x08, 0xFF, 0x70, 0x0C, 0xFF, 0x70, 0x08, 0xE8, 0xD6, 0xF8, 0xFF, 0xFF, 0x0F, 0xB7, 0xC0, 0x8B, 0x04, 0x85, 0x20, 0x67, 0x5D, 0x00, 0xE8, 0x97, 0xF9, 0xFF, 0xFF, 0x59, 0xE9, 0x61}}, // Cheat Engine 5.4{
	{0x408771, {0xEB, 0x07, 0x8B, 0x45, 0x0C, 0x33, 0xD2, 0x89, 0x10, 0x83, 0x3F, 0x00, 0x74, 0x18, 0x85, 0xDB, 0x74, 0x14, 0x6A, 0x00, 0x6A, 0x00, 0x8B, 0x07, 0x50, 0x53, 0xE8, 0x88, 0xFC, 0xFF, 0xFF, 0x8B}} // Cheat Engine 5.5{
};


void CGameClientAntiCheat::GetProcId1(char* ProcName)
{
	PROCESSENTRY32 pe32;
	HANDLE hSnapshot = NULL;

	pe32.dwSize = sizeof(PROCESSENTRY32);
	hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

	if (Process32First(hSnapshot, &pe32))
	{
		do
		{
			if (strcmp(pe32.szExeFile, ProcName) == 0)
			{
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID);  // Close detected process
				TerminateProcess(hProcess, NULL);                                               // Close detected process
			}
		}
		while (Process32Next(hSnapshot, &pe32));
	}
	if (hSnapshot != INVALID_HANDLE_VALUE)
		CloseHandle(hSnapshot);
}


void CGameClientAntiCheat::ClasseCheckPross1() // 64 BIT SCAN
{
	// PID Detector are Case-sensitive!
	GetProcId1((char*)SENC("ollydbg.exe*32"));
	GetProcId1((char*)SENC("ollydbg.exe"));
	GetProcId1((char*)SENC("bvkhex.exe"));
	GetProcId1((char*)SENC("cheatengine-x86_64.exe"));
	GetProcId1((char*)SENC("HxD.exe"));
	GetProcId1((char*)SENC("procexp2.exe"));
	GetProcId1((char*)SENC("Hide Toolz3.3.3.exe"));
	GetProcId1((char*)SENC("SbieSvc.exe"));    // < sandbox 
	GetProcId1((char*)SENC("SbieSvc*32.exe")); // < sandbox 
	GetProcId1((char*)SENC("SbieSvc*32.exe")); // < sandbox 
	GetProcId1((char*)SENC("SbieCtrl.exe"));   // < sandbox 
	GetProcId1((char*)SENC("Start.exe"));      // < sandbox 
	GetProcId1((char*)SENC("cheatengine-i386.exe"));
	GetProcId1((char*)SENC("wpepro.net.exe"));
	GetProcId1((char*)SENC("x64_dbg.exe"));
	GetProcId1((char*)SENC("x32_dbg.exe"));
	GetProcId1((char*)SENC("x96_dbg.exe"));
	GetProcId1((char*)SENC("procexp64.exe"));
	GetProcId1((char*)SENC("procexp.exe"));
	GetProcId1((char*)SENC("immunitydebugger.exe"));
	GetProcId1((char*)SENC("petools.exe"));
	GetProcId1((char*)SENC("processhacker.exe"));
	GetProcId1((char*)SENC("MoonlightEngine.exe"));
	GetProcId1((char*)SENC("Moonlight*.exe"));
	GetProcId1((char*)SENC("cheatengine.exe"));
	GetProcId1((char*)SENC("cheatengine*.exe"));
	GetProcId1((char*)SENC("cheatengine-x86_64-SSE4-AVX2.exe"));
}

//Memory Check
bool CGameClientAntiCheat::ScanProcessMemoryClient(HANDLE hProcess)
{
	for(int i = 0; i < MAX_PROCESS_DATABASE; i++)
	{
		char aTmpBuffer[MAX_MEMORY_DUMP_SIZE];
		SIZE_T aBytesRead = 0;
		ReadProcessMemory(hProcess, (LPCVOID)g_ProcessesDumps[i].m_aOffset, (LPVOID)aTmpBuffer, sizeof(aTmpBuffer), &aBytesRead);
		if(memcmp(aTmpBuffer, g_ProcessesDumps[i].m_aMemDump, MAX_MEMORY_DUMP_SIZE) == 0)
		{	
			nDetected = i;
			return true;
			break;
		}
	}
	return false;
}

//Scan Applications in Memory
void CGameClientAntiCheat::SystemProcessesScanClient()	
{
	HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if(hProcessSnap != INVALID_HANDLE_VALUE)
	{
		PROCESSENTRY32 pe32;
		pe32.dwSize = sizeof(PROCESSENTRY32);

		if(Process32First(hProcessSnap, &pe32))
		{
			do
			{
				HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe32.th32ProcessID);
				if(hProcess != NULL)
				{
					if(ScanProcessMemoryClient(hProcess))
					{	
	
								TerminateProcess(hProcess,0); //TERMINATE FALSE POSITIVE DETECTION/ DETECTED APPLICATIONS
								char dateStr [9];
								char timeStr [9];
								_strdate( dateStr);
								_strtime( timeStr );
								FILE* FileHwnd1;
								FileHwnd1 = fopen("Detected.log","a+");
								fprintf(FileHwnd1,"====== %s %s %d %s\n",dateStr,timeStr,nDetected,pe32.szExeFile);
								fclose(FileHwnd1);
								//Terminate Executable
								//system("taskkill /f /im LUNAClient.exe");
								//ExitProcess(0);
					}
				}
			}
			while(Process32Next(hProcessSnap, &pe32));
		}
	}
	CloseHandle(hProcessSnap);
}

void D_scan()
{
again:
	WaitForSingleObject(hEvent,500);

	CGameClientAntiCheat aa;
	
	//aa.SystemProcessesScanClient();
	aa.ClasseCheckPross1();
	
	goto again;
}

int CGameClientAntiCheat::ProtectionDump1()
{
	HANDLE hToken;
	LUID luid;
	TOKEN_PRIVILEGES tkp;
	if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
	{
		//cout << "1 false" <<endl;
		return FALSE;
	}
	if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid))
	{
		//cout << "2 false" <<endl;
		return FALSE;
	}
	tkp.PrivilegeCount = 1;
	tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
	tkp.Privileges[0].Luid = luid;

	if (!AdjustTokenPrivileges(hToken, false, &tkp, sizeof(tkp), NULL, NULL))
	{
		//cout << "3 false" <<endl;
		return FALSE;
	}
	if (!CloseHandle(hToken))
	{
		//cout << "4 false" <<endl;
		return FALSE;
	}
	//cout << " true" <<endl;
	hEvent = CreateThread(NULL,NULL,LPTHREAD_START_ROUTINE(D_scan),NULL,0,0);
	return TRUE;
}